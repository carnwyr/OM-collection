extends ../layout

block content
  -
    function started() {
      return new Date() > new Date(data.start);
    }
    function ended() {
      return new Date() > new Date(data.end);
    }
  div.container
    h1= title
    div.card.card-body.mb-3
      a.h5.text-center.m-0(href="#collapseinfo" data-toggle="collapse" role="button" aria-expanded="false" aria-controls="collapseinfo") Information
        |
        |
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-up" viewBox="0 0 16 16">   <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/> </svg>
      div#collapseinfo.collapse
        h5.card-title A few things about how it works
        span.card-text This calculator:
        ul
          li always round up in calculation.
          li can only be as accurate as your input.
          li evenly spreads necessary battles throughout remaining days. Even if you can complete the goal today with free battles, it will still divide remaining battles among remaining days.
          li currently do not support boosting periods. Please be careful when using during those times.
        h5.card-title Assumptions
        span.card-text This calculator assumes that:
        ul
          li you get three-stars on every battle.
          li you have not cleared today's free battles.
        h5.text-center.m-0 Please use your own calculation if you believe Karasu's results are wrong!
    div.card
      div.card-body
        div.row
          div#pqinfo.col-12.col-md-4.text-center
            //- h5 On-going
            h5= t("lang") === "ja" ? data.name.ja : data.name.en
            a(href="/event/" + getURL(data.name.en)): img.img-fluid.rounded.mb-3(src="/images/events/" + encodeURIComponent(data.name.en) + ".jpg" onerror="this.onerror=null;this.src='/images/event_placeholder.jpg'")
            if started()
              - timerDate = data.end;
              p Ending in
            else
              - timerDate = data.start;
              p Starting in
            h5#cd --
            hr.d-md-none
          div.col-12.col-md-8
            //- h5 Calculator
            form#calculator
              div.form-row
                div.form-group.col-12.col-md-4
                  label Goal
                  input.form-control(type="number" name="goal")
                div.form-group.col-12.col-md-4
                  label Current pts
                  input.form-control(type="number" name="currpts")
                div.form-group.col-12.col-md-4
                  label Pts per battle
                  input.form-control(type="number" name="ppb" readonly=data.isBirthday value=(data.isBirthday?12:''))
            hr
            //- h5 Result
            div.text-center
              p Today's goal
              h5#goaltoday --
              br
              p Required battles
              h5#dailybattles --
              br
              p Required AP
              h5#apreq --
      if !started()
        div.w-100.h-100.rounded(style="position:absolute;background:rgba(255,255,255,.8);")
          div.row.w-100.h-100.justify-content-center.align-items-center
            h5 Coming soon.
      if ended()
        div.w-100.h-100.rounded(style="position:absolute;background:rgba(255,255,255,.8);")
          div.row.w-100.h-100.justify-content-center.align-items-center
            h5 This event has ended.

  style.
    @media (min-width: 768px) {
      #pqinfo {
        border-right:1px solid #e5e5e5;
      }
    }
    a[data-toggle="collapse"][aria-expanded="false"] .bi.bi-chevron-up {
      transform: rotate(180deg);
    }
  script.
    let collapseinfo = localStorage.getItem("#collapseinfo");
    if (collapseinfo === "false") {
      $("#collapseinfo").collapse("show");
    }
    $("a[data-toggle='collapse']").click(function() {
      localStorage.setItem($(this).attr("href"), $(this).attr("aria-expanded"));
    });
    $(function() {
      countdown();
      calculate();
      $("form#calculator").on("change", calculate);
    });
    function calculate() {
      let goal = parseInt($("input[name='goal']").val());
      let currentPts = parseInt($("input[name='currpts']").val());
      let ptsPerBattle = parseInt($("input[name='ppb']").val());

      if (isNaN(goal) || isNaN(currentPts) || isNaN(ptsPerBattle) ||
          goal < 0 || currentPts < 0 || ptsPerBattle < 0 ||
          goal < currentPts) return;

      let countDownDate = new Date(!{JSON.stringify(data.end)}).getTime();
      let now = new Date().getTime();
      let distance = countDownDate - now;
      let daysLeft = Math.floor(distance / (1000 * 60 * 60 * 24));

      let dailyGoal =  Math.ceil((goal - currentPts) / daysLeft);
      let dailyBattles = Math.ceil(dailyGoal / ptsPerBattle);

      $("#goaltoday").text(currentPts + dailyBattles * ptsPerBattle);
      $("#dailybattles").text(`${dailyBattles} (${Math.floor(dailyBattles/3)} stages ${dailyBattles%3} battles)`);
      $("#apreq").text((dailyBattles * 8).toLocaleString("en"));
    }
    function countdown() {
      let countDownDate = new Date(!{JSON.stringify(timerDate)}).getTime();
      let timer = setInterval(function () {
        let now = new Date().getTime();
        let distance = countDownDate - now;
        let days = Math.floor(distance / (1000 * 60 * 60 * 24));
        let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)).toLocaleString('en-US', { minimumIntegerDigits: 2 });
        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)).toLocaleString('en-US', { minimumIntegerDigits: 2 });
        let seconds = Math.floor((distance % (1000 * 60)) / 1000).toLocaleString('en-US', { minimumIntegerDigits: 2 });

        document.getElementById("cd").innerHTML = `${days} days ${hours}:${minutes}:${seconds}`;

        if (distance < 0) {
          clearInterval(timer);
          document.getElementById("cd").innerHTML = "--";
        }
      }, 1000);
    }
